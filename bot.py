import os
import json
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler

from responses import get_auto_reply

TOKEN = os.environ.get("TOKEN")
gspread_key = json.loads(os.environ.get("GSPREAD_JSON"))
MODERATOR_CHAT_ID = os.environ.get("MODERATOR_CHAT_ID")

scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_dict(gspread_key, scope)
client = gspread.authorize(creds)

sheet = client.open("AutoVerse Support Tickets").sheet1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text(f"üÜî chat_id: `{chat_id}`", parse_mode="Markdown")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", update)
    
    if not update.message:
        print("‚ùó update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return

    try:
        user = update.message.from_user
        user_id = user.id
        username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip()
        user_message = update.message.text
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        print(f"–û—Ç {username} ({user_id}): {user_message}")

        try:
            sheet.append_row([str(user_id), username, user_message, timestamp])
            print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google –¢–∞–±–ª–∏—Ü—É")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

        try:
            auto_reply = get_auto_reply(user_message)
            await update.message.reply_text(auto_reply)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–µ: {e}")

        if MODERATOR_CHAT_ID:
            try:
                message = (
                    f"üì¨ –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}\n\n"
                    f"{user_message}\n\nüïí {timestamp}"
                )
                await context.bot.send_message(chat_id=int(MODERATOR_CHAT_ID), text=message)
                print("üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: {e}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("getid", get_chat_id))
    app.add_handler(MessageHandler(filters.ALL, handle_message))
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É —Å–æ–æ–±—â–µ–Ω–∏–π")
    app.run_polling()
