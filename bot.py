import os
import sys
import json
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# === –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ ===
LOCK_FILE = ".bot.lock"

if os.path.exists(LOCK_FILE):
    print("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–∞—é —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å.")
    sys.exit(1)

with open(LOCK_FILE, "w") as f:
    f.write("")
print("‚úÖ Lock-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")

import atexit
def remove_lock_file():
    if os.path.exists(LOCK_FILE):
        os.remove(LOCK_FILE)
        print("üßπ Lock-—Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω")
atexit.register(remove_lock_file)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TOKEN = os.environ.get("TOKEN")
MODERATOR_CHAT_ID_ENV = os.environ.get("MODERATOR_CHAT_ID")
MODERATOR_CHAT_ID = int(MODERATOR_CHAT_ID_ENV) if MODERATOR_CHAT_ID_ENV else None
TOPICS_FILE = "topics.json"

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ ===
if os.path.exists(TOPICS_FILE):
    with open(TOPICS_FILE, "r", encoding="utf-8") as f:
        raw_topics = json.load(f)
        # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∫–ª—é—á–∏ –∫ —Ñ–æ—Ä–º–∞—Ç—É "–≤_—Ä–∞–±–æ—Ç–µ"
        TOPICS = {k.strip().lower().replace(" ", "_"): v for k, v in raw_topics.items()}
else:
    TOPICS = {}

# === –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ç–≤–æ–∏—Ö –º–æ–¥—É–ª–µ–π ===
try:
    from responses import get_auto_reply
    from utils.sheets import append_ticket, update_status
    from utils.stats import generate_daily_report
except ImportError as e:
    print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏: {e}")
    sys.exit(1)

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –º—ã –∫–æ–º–∞–Ω–¥–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ AutoVerse. "
        "–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    )

async def settopics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not MODERATOR_CHAT_ID or update.effective_chat.id != MODERATOR_CHAT_ID:
        return

    if not update.message.message_thread_id:
        await update.message.reply_text("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç–æ–ø–∏–∫–∞.")
        return

    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settopics <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    name = context.args[0].strip().lower().replace(" ", "_")
    TOPICS[name] = update.message.message_thread_id

    with open(TOPICS_FILE, "w", encoding="utf-8") –∫–∞–∫ –æ–±—ã—á–Ω–æ, –Ω–æ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –º–µ–Ω—è—Ç—å—Å—è –Ω–∞ ¬´‚úÖ –í –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ¬ª

            elif data.startswith("replyto:"):
                parts = data.split(":")
                if len(parts) < 3:
                    await query.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
                    return
                user_id = parts[1]
                original_message_id = parts[2]

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                await query.message.reply_text(f"/reply {user_id} {original_message_id} ")

        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(f"[ERROR] –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")

    async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE):

        if not update.message:
            return

        try:
            args = context.args
            if len(args) < 3:
                await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <user_id> <message_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
                return

            user_id = int(args[0])
            original_message_id = int(args[1])
            text = " ".join(args[2:])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(chat_id=user_id, text=text)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —á–∞—Ç–µ
            if update.effective_chat.id != MODERATOR_CHAT_ID:
                await update.message.reply_text("‚ö†Ô∏è –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–º —á–∞—Ç–µ.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∏–∫–µ—Ç–æ–º
            orig_message = await context.bot.get_message(
                chat_id=MODERATOR_CHAT_ID,
                message_id=original_message_id
            )

            original_text = orig_message.text or ""

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É, –¥–æ–±–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å –∏ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
            new_text = original_text.split("\n\nüìå")[0] + f"\n\nüìå –°—Ç–∞—Ç—É—Å: –≥–æ—Ç–æ–≤–æ"

            thread_id = TOPICS.get("–≥–æ—Ç–æ–≤–æ")
            if not thread_id:
                await update.message.reply_text("‚ùå –¢–æ–ø–∏–∫ '–≥–æ—Ç–æ–≤–æ' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ `/settopics –≥–æ—Ç–æ–≤–æ`")
                return

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [[
                InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"status:–≥–æ—Ç–æ–≤–æ:{original_message_id}:{user_id}")
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫
            await context.bot.send_message(
                chat_id=MODERATOR_CHAT_ID,
                message_thread_id=thread_id,
                text=new_text,
                reply_markup=reply_markup
            )

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await orig_message.delete()
            except Exception as e:
                print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Ç–∏–∫–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ —Ç–æ–ø–∏–∫ '–≥–æ—Ç–æ–≤–æ'.")

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /reply: {e}")
            print(f"[ERROR] –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /reply: {e}")

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (—Å—Ç–∞—Ç—É—Å—ã) ===
    async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        try:
            data = query.data
            if data.startswith("status:"):
                parts = data.split(":")
                status = parts[1]
                message_id = int(parts[2])
                user_id = parts[3] if len(parts) > 3 else None

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Google Sheets
                update_status(message_id, status)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á —Ç–æ–ø–∏–∫–∞
                target_topic_key = status.strip().lower().replace(" ", "_")
                thread_id = TOPICS.get(target_topic_key)

                print(f"[DEBUG] –¶–µ–ª–µ–≤–æ–π —Ç–æ–ø–∏–∫: {target_topic_key}, ID: {thread_id}")

                if not MODERATOR_CHAT_ID:
                    await query.message.reply_text("‚ùå MODERATOR_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω")
                    return

                if not thread_id:
                    await query.message.reply_text(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–ø–∏–∫ '{target_topic_key}'. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ /settopics")
                    return

                # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                original_text = query.message.text or ""
                new_text = f"{original_text.split('üìå')[0]}\n\nüìå –°—Ç–∞—Ç—É—Å: {status}"

                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å"
                keyboard = [[
                    InlineKeyboardButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"replyto:{user_id}:{message_id}")
                ]]

                reply_markup = InlineKeyboardMarkup(keyboard)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫
                await context.bot.send_message(
                    chat_id=MODERATOR_CHAT_ID,
                    message_thread_id=thread_id,
                    text=new_text,
                    reply_markup=reply_markup
                )

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await query.message.delete()
                except Exception as e:
                    print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            elif data.startswith("replyto:"):
                user_id = data.split(":")[1]
                original_message_id = data.split(":")[2]
                await query.message.reply_text(f"/reply {user_id} {original_message_id} ")

        except Exception as e:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print(f"[ERROR] –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")

    # === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
    if __name__ == "__main__":
        app = ApplicationBuilder().token(TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("report", report))
        app.add_handler(CommandHandler("reply", reply))
        app.add_handler(CommandHandler("settopics", settopics))
        app.add_handler(CallbackQueryHandler(button_callback))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        import asyncio
        loop = asyncio.get_event_loop()
        loop.run_until_complete(app.bot.delete_webhook(drop_pending_updates=True))

        print("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()
