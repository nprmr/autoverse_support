import os
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

from responses import get_auto_reply
from utils.sheets import append_ticket, update_status
from utils.stats import generate_daily_report

TOKEN = os.environ.get("TOKEN")
MODERATOR_CHAT_ID = int(os.environ.get("MODERATOR_CHAT_ID"))
TOPICS_FILE = "topics.json"

if os.path.exists(TOPICS_FILE):
    with open(TOPICS_FILE, "r") as f:
        raw = json.load(f)
        TOPICS = {k.strip().lower().replace(" ", "_"): v for k, v in raw.items()}
else:
    TOPICS = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –º—ã –∫–æ–º–∞–Ω–¥–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ AutoVerse. "
        "–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    )

async def settopics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or update.message.chat_id != MODERATOR_CHAT_ID:
        return
    if not update.message.is_topic_message:
        await update.message.reply_text("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç–æ–ø–∏–∫–∞.")
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settopics <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    name = context.args[0].strip().lower().replace(" ", "_")
    TOPICS[name] = update.message.message_thread_id
    with open(TOPICS_FILE, "w") as f:
        json.dump(TOPICS, f)
    await update.message.reply_text(f'‚úÖ –¢–æ–ø–∏–∫ "{name}" —Å–æ—Ö—Ä–∞–Ω—ë–Ω. ID: {TOPICS[name]}')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or update.message.text.startswith("/"):
        return
    user = update.message.from_user
    user_id = user.id
    username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip()
    user_message = update.message.text
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    row_index = append_ticket(user_id, username, user_message, timestamp)
    auto_reply = get_auto_reply(user_message)
    await update.message.reply_text(auto_reply)

    print("üë§ user_id =", user_id)
    print("üîò callback_data =", f"status:–≤ —Ä–∞–±–æ—Ç—É:{row_index}:{user_id}")
    keyboard = [
        [
            InlineKeyboardButton("üõ† –í —Ä–∞–±–æ—Ç—É", callback_data=f"status:–≤ —Ä–∞–±–æ—Ç—É:{row_index}:{user_id}"),
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"status:–≥–æ—Ç–æ–≤–æ:{row_index}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"status:–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ:{row_index}"),
            InlineKeyboardButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"replyto:{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    thread_id = TOPICS.get("–Ω–æ–≤—ã–µ")
    print("üì© –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç, —Ç–æ–ø–∏–∫ '–Ω–æ–≤—ã–µ':", thread_id)
    if thread_id:
        await context.bot.send_message(
            chat_id=MODERATOR_CHAT_ID,
            message_thread_id=thread_id,
            text=f"<pre>üì¨ –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{username}\n\n{user_message}\n\nüïí {timestamp}</pre>",
            parse_mode="HTML",
            reply_markup=reply_markup
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print('‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞')
    # query —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω –≤—ã—à–µ
    print('üì¶ query.data =', query.data)
    # query —É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω –≤—ã—à–µ
    await query.answer()
    try:
        data = query.data
        if data.startswith("status:"):
            parts = data.split(":")
            status = parts[1]
            row_index = int(parts[2])
            user_id = parts[3] if len(parts) > 3 else None
            update_status(row_index, status)

            try:
                await query.message.delete()
            except:
                pass

            key = status.strip().lower().replace(" ", "_")
            thread_id = TOPICS.get(key)
            print("üîÅ –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–∏–∫–µ—Ç, —Å—Ç–∞—Ç—É—Å:", status)
            print("üßµ TOPICS:", TOPICS)
            print("üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á:", key)

            if thread_id:
                text = f"üìå –û–±—Ä–∞—â–µ–Ω–∏–µ #{row_index}\n–°—Ç–∞—Ç—É—Å: {status}"
                print("üë§ user_id =", user_id)
    print("üîò callback_data =", f"status:–≤ —Ä–∞–±–æ—Ç—É:{row_index}:{user_id}")
    keyboard = [[InlineKeyboardButton("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"replyto:{user_id}")]]
                await context.bot.send_message(
                    chat_id=MODERATOR_CHAT_ID,
                    message_thread_id=thread_id,
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        elif data.startswith("replyto:"):
            user_id = data.split(":")[1]
            await query.message.reply_text(f"/reply {user_id} ")
    except Exception as e:
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        report = generate_daily_report()
        thread_id = TOPICS.get("–æ—Ç—á–µ—Ç—ã")
        if thread_id:
            await context.bot.send_message(chat_id=MODERATOR_CHAT_ID, message_thread_id=thread_id, text=report)
        else:
            await update.message.reply_text(report)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    try:
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
            return
        user_id = int(args[0])
        text = " ".join(args[1:])
        await context.bot.send_message(chat_id=user_id, text=text)
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    import asyncio
    asyncio.get_event_loop().run_until_complete(app.bot.delete_webhook(drop_pending_updates=True))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("report", report))
    app.add_handler(CommandHandler("reply", reply))
    app.add_handler(CommandHandler("settopics", settopics))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))
    app.run_polling()
