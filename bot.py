import os
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CommandHandler, CallbackQueryHandler

from responses import get_auto_reply
from utils.sheets import append_ticket, update_status
from utils.stats import generate_daily_report

TOKEN = os.environ.get("TOKEN")
MODERATOR_CHAT_ID = os.environ.get("MODERATOR_CHAT_ID")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç, –º—ã –∫–æ–º–∞–Ω–¥–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ AutoVerse. "
        "–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äî "
        "–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
    )
    await update.message.reply_text(welcome_message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or update.message.text is None:
        return

    if update.message.text.strip().startswith("/"):
        return

    user = update.message.from_user
    user_id = user.id
    username = user.username or f"{user.first_name or ''} {user.last_name or ''}".strip()
    user_message = update.message.text
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    row_index = append_ticket(user_id, username, user_message, timestamp)
    auto_reply = get_auto_reply(user_message)
    await update.message.reply_text(auto_reply)

    keyboard = [
        [
            InlineKeyboardButton("üõ† –í —Ä–∞–±–æ—Ç—É", callback_data=f"status:–≤ —Ä–∞–±–æ—Ç—É:{row_index}"),
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"status:–≥–æ—Ç–æ–≤–æ:{row_index}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"status:–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ:{row_index}"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

     if MODERATOR_CHAT_ID:
        message = (
            f"<pre>üì¨ –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}\n\n"
            f"{user_message}\n\nüïí {timestamp}</pre>"
        )
        await context.bot.send_message(
            chat_id=int(MODERATOR_CHAT_ID),
            text=message,
            parse_mode="HTML",
            reply_markup=reply_markup
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        _, status, row = query.data.split(":")
        row_index = int(row)
        update_status(row_index, status)

        if status == "–≤ —Ä–∞–±–æ—Ç—É":
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ", callback_data=f"status:–≥–æ—Ç–æ–≤–æ:{row_index}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ", callback_data=f"status:–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ:{row_index}"),
                ]
            ]
            await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
            await query.message.reply_text("üìå –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: –≤ —Ä–∞–±–æ—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")
        else:
            await query.edit_message_reply_markup(None)
            await query.message.reply_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {status}")
    except Exception as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        report = generate_daily_report()
        await update.message.reply_text(report)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–æ—Ç—á–µ—Ç", report))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))
    app.run_polling()
