import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from utils.sheets import append_ticket
from responses import get_auto_reply
import os

TOKEN = os.getenv("TOKEN")
GROUP_ID = os.getenv("GROUP_ID")  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

TOPIC_NEW = 120
TOPIC_WORK = 124
TOPIC_DONE = 128
TOPIC_REJECTED = 132

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ, —Å —á–µ–º –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'reply'
    if message.text.startswith("reply"):
        parts = message.text.split(maxsplit=2)
        if len(parts) >= 3:
            target_user_id = int(parts[1])
            reply_text = parts[2]
            try:
                await context.bot.send_message(chat_id=target_user_id, text=reply_text)
                await message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
            except Exception as e:
                await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        else:
            await message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: reply 123456789 –í–∞—à –æ—Ç–≤–µ—Ç")
        return
    user_message = message.text
    username = message.from_user.username or "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    full_name = f"{first_name} {last_name}".strip()
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç –≤ Google Sheets
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    append_ticket(full_name, username, user_message, timestamp)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å.")

    # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –ø–æ —Å–º—ã—Å–ª—É
    auto_reply = get_auto_reply(user_message)
    await message.reply_text(auto_reply)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∏–∫–µ—Ç–∞ –≤ —Ç–æ–ø–∏–∫ "–ù–æ–≤—ã–µ" —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í —Ä–∞–±–æ—Ç—É" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    keyboard = [
        [
            InlineKeyboardButton("üõ† –í —Ä–∞–±–æ—Ç—É", callback_data=f"work:{user_id}:{user_message}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}:{user_message}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=GROUP_ID,
        message_thread_id=TOPIC_NEW,
        text=f"üì© –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{username} (ID {user_id}):\n\n{user_message}",
        reply_markup=reply_markup
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split(":")
    action = data[0]
    user_id = data[1]
    user_message = data[2] if len(data) > 2 else None

    if action == "work":
        # –ü–µ—Ä–µ–Ω–æ—Å –≤ "–í —Ä–∞–±–æ—Ç–µ" —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [
                InlineKeyboardButton("‚úâ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{user_id}"),
                InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close:{user_id}:{user_message}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=TOPIC_WORK,
           text=f"üõ† –í —Ä–∞–±–æ—Ç–µ: –æ—Ç ID {user_id}:\n\n{user_message}",

            reply_markup=reply_markup
        )

        await query.edit_message_text("‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Ä–∞–±–æ—Ç—É")

    elif action == "reject":
        # –ü–µ—Ä–µ–Ω–æ—Å –≤ "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"
        await context.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=TOPIC_REJECTED,
            text=f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: –æ—Ç ID {user_id}:\n\n{user_message}",

        )
        await query.edit_message_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

    elif action == "reply":
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–∞—Å–∫—É –æ—Ç–≤–µ—Ç–∞
        await query.message.reply_text(f"reply {user_id} –í–∞—à –æ—Ç–≤–µ—Ç...")

    elif action == "close":
        # –ü–µ—Ä–µ–Ω–æ—Å –≤ "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"
        await context.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=TOPIC_DONE,


async def on_startup(app):
    await app.bot.delete_webhook(drop_pending_updates=True)

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    
    app.run_polling()
