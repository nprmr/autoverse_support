import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from utils.sheets import append_ticket
from responses import get_auto_reply
import os

TOKEN = os.getenv("TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

TOPIC_NEW = 120
TOPIC_WORK = 124
TOPIC_DONE = 128
TOPIC_REJECTED = 132

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ, —Å —á–µ–º –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –º—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É 'reply'
    if message.text.startswith("reply"):
        parts = message.text.split(maxsplit=2)
        if len(parts) >= 3:
            target_user_id = int(parts[1])
            reply_text = parts[2]
            try:
                await context.bot.send_message(chat_id=target_user_id, text=reply_text)
                await message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
            except Exception as e:
                await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        else:
            await message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: reply 123456789 –í–∞—à –æ—Ç–≤–µ—Ç")
        return

    # –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ç–æ–ø–∏–∫–µ ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –õ–°
    if message.message_thread_id:
        for uid, thread_id in context.bot_data.get("user_topics", {}).items():
            if thread_id == message.message_thread_id:
                try:
                    await context.bot.send_message(chat_id=uid, text=message.text)
                    await message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –∏—Ö —Ç–æ–ø–∏–∫–∞")
                except Exception as e:
                    await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
                return
    user_message = message.text
    username = message.from_user.username or "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    full_name = f"{first_name} {last_name}".strip()
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç –≤ Google Sheets
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    append_ticket(full_name, username, user_message, timestamp)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ–¥–∏–Ω –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ä–∞–±–æ—Ç–µ)
    if user_id not in context.bot_data.get("user_topics", {}):
        auto_reply = get_auto_reply(user_message)
        default_reply = "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –≤—Å—ë –ø–µ—Ä–µ–¥–∞–¥–∏–º –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        if auto_reply != default_reply:
            await message.reply_text(auto_reply)
        else:
            await message.reply_text(default_reply)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∏–∫–µ—Ç–∞ –≤ —Ç–æ–ø–∏–∫ "–ù–æ–≤—ã–µ" —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í —Ä–∞–±–æ—Ç—É" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    keyboard = [
        [
            InlineKeyboardButton("üõ† –í —Ä–∞–±–æ—Ç—É", callback_data=f"work:{user_id}:{user_message}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}:{user_message}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫ ‚Äî –Ω–∞–ø—Ä–∞–≤–∏–º —Ç—É–¥–∞
    thread_id = context.bot_data.get("user_topics", {}).get(user_id, TOPIC_NEW)

    await context.bot.send_message(
        chat_id=GROUP_ID,
        message_thread_id=thread_id,
        text=f"üì© –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{username} (ID {user_id}):\n\n{user_message}",
        reply_markup=reply_markup if thread_id == TOPIC_NEW else None
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split(":")
    action = data[0]
    user_id = data[1]
    user_message = data[2] if len(data) > 2 else None

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if "user_topics" not in context.bot_data:
        context.bot_data["user_topics"] = {}

    if action == "work":
        # –°–æ–∑–¥–∞—ë–º —Ç–æ–ø–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω
        if int(user_id) not in context.bot_data["user_topics"]:
            username = query.from_user.username or "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
            topic = await context.bot.create_forum_topic(
                chat_id=GROUP_ID,
                name=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {user_id}"
            )
            context.bot_data["user_topics"][int(user_id)] = topic.message_thread_id

            await context.bot.send_message(
                chat_id=GROUP_ID,
                message_thread_id=topic.message_thread_id,
                text=f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ —Ä–∞–±–æ—Ç–µ —É @{username} (ID {user_id}):\n\n{user_message}"
            )

            await context.bot.send_message(
                chat_id=GROUP_ID,
                message_thread_id=topic.message_thread_id,
                text="üõ† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /close –≤ —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ –¥–ª—è –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            )

        thread_id = context.bot_data["user_topics"][int(user_id)]

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ–≤–æ–¥–µ –≤ —Ä–∞–±–æ—Ç—É
        await context.bot.send_message(
            chat_id=int(user_id),
            text="üë®‚Äçüíª –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
        )

        await query.edit_message_text("‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ —Ä–∞–±–æ—Ç—É")

    elif action == "reject":
        # –ü–µ—Ä–µ–Ω–æ—Å –≤ "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"
        await context.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=TOPIC_REJECTED,
            text=f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: –æ—Ç ID {user_id}:\n\n{user_message}",

        )
        await query.edit_message_text("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

    elif action == "reply":
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–∞—Å–∫—É –æ—Ç–≤–µ—Ç–∞
        await query.message.reply_text(f"reply {user_id} –í–∞—à –æ—Ç–≤–µ—Ç...")
    
    elif action == "close":
        # –ü–µ—Ä–µ–Ω–æ—Å –≤ "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"
        await context.bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=TOPIC_DONE,
            text=f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –æ—Ç ID {user_id}:\n\n{user_message}"

        )

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–ø–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if "user_topics" in context.bot_data:
            thread_id = context.bot_data["user_topics"].get(int(user_id))
            if thread_id:
                try:
                    await context.bot.close_forum_topic(
                        chat_id=GROUP_ID,
                        message_thread_id=thread_id
                    )
                    del context.bot_data["user_topics"][int(user_id)]
                except Exception as e:
                    await query.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Ç–æ–ø–∏–∫: {e}")

        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å!"
        )

        await query.edit_message_text("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")

async def close_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    thread_id = update.message.message_thread_id
    if not thread_id:
        await update.message.reply_text("‚ùó –ö–æ–º–∞–Ω–¥—É /close –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä—É–º–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞.")
        return

    user_topics = context.bot_data.get("user_topics", {})
    for uid, tid in user_topics.items():
        if tid == thread_id:
            await context.bot.send_message(
                chat_id=GROUP_ID,
                message_thread_id=TOPIC_DONE,
                text=f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –æ—Ç ID {uid}:\n\n(–∑–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /close)"
            )
            await context.bot.close_forum_topic(chat_id=GROUP_ID, message_thread_id=thread_id)
            del context.bot_data["user_topics"][uid]
            await update.message.reply_text("‚úÖ –¢–æ–ø–∏–∫ –∑–∞–∫—Ä—ã—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")
            await context.bot.send_message(chat_id=uid, text="‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å!")
            return

    await update.message.reply_text("‚ùó –≠—Ç–æ—Ç —Ç–æ–ø–∏–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π. –ó–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")


from telegram import BotCommand

async def on_startup(app):
    await app.bot.delete_webhook(drop_pending_updates=True)

    await app.bot.set_my_commands([
        BotCommand("close", "–ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ (–≤–Ω—É—Ç—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞)")
    ])

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("close", close_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    
    app.run_polling()
